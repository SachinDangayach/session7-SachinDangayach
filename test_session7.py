import pytest
import random
import string
import session7
import os
import inspect
import re
import math
from functools import reduce
from functools import partial

README_CONTENT_CHECK_FOR = [
    'filter',
    'lambda',
    'reduce',
    'partial'
]


def test_readme_exists():
    assert os.path.isfile("README.md"), "README.md file missing!"

def test_readme_contents():
    readme = open("README.md", "r", encoding="utf-8")
    readme_words = readme.read().split()
    readme.close()
    assert len(readme_words) >= 500, "Make your README.md file interesting! Add atleast 500 words"

def test_readme_proper_description():
    READMELOOKSGOOD = True
    f = open("README.md", "r", encoding="utf-8")
    content = f.read()
    f.close()
    for c in README_CONTENT_CHECK_FOR:
        if c not in content:
            READMELOOKSGOOD = False
            pass
    assert READMELOOKSGOOD == True, "You have not described all the functions/class well in your README.md file"

def test_readme_file_for_formatting():
    f = open("README.md", "r", encoding="utf-8")
    content = f.read()
    f.close()
    assert content.count("#") >= 10

def test_indentations():
    ''' Returns pass if used four spaces for each level of syntactically \
    significant indenting.'''
    lines = inspect.getsource(session7)
    spaces = re.findall('\n +.', lines)
    for space in spaces:
        assert len(space) % 4 == 2, "Your script contains misplaced indentations"
        assert len(re.sub(r'[^ ]', '', space)) % 4 == 0, "Your code indentation does not follow PEP8 guidelines"

def test_function_name_had_cap_letter():
    functions = inspect.getmembers(session7, inspect.isfunction)
    for function in functions:
        assert len(re.findall('([A-Z])', function[0])) == 0, "You have used Capital letter(s) in your function names"


############################## session 7 Validations###########################

def test_fibonacci_by_reduce():
    """ Test function using only list filter lambda that can tell
    whether a number is a Fibonacci number or not"""
    fib = lambda n: reduce(lambda x, _: x+[x[-1]+x[-2]], range(n-2), [0, 1])
    fib_list = fib(21) # Generate pre-calculated list of Fibobacci number (fib(22) is greater than 10K)
    test_list = [1,2,3,4,6,55,67,99,144]
    output_list = list(filter(lambda x: True if x in fib_list else False,test_list))
    assert output_list == [1, 2, 3, 55, 144], "Fibobacci finder is not working correctly"


def test_odd_even_sum():
    """Test add 2 iterables a and b such that a is even and b is odd
    using list comprehension (and zip/lambda/etc if required) """
    l1 =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    l2 =  [21, 24, 27, 30, 33, 36, 39, 42]

    l3 = [a+b for a,b in zip(l1,l2) if a%2==0 and b%2!=0] #<- Solution 2.1
# output: [21, 29, 37, 45]
    assert l3 == [21, 29, 37, 45], "output generated by expression is not correct"

def test_strip_vowel():
    """Test function to strips every vowel from a string provided (tsai>>t s)"""
    str1 = 'tsai The school of AI'
# output: 'ts Th schl f '
    output = ''.join([x for x in str1 if x not in {'a', 'A', 'e','E','i', 'I','o', 'O','u', 'U'}])
    assert output  == 'ts Th schl f ', "String output generated by expression is not correct"

def test_relu():
    """Test function acts like a ReLU function for a 1D array"""
    weights = [-4.5, 3.7, -0.1, -1.1, -5.0, 3.7, 4.9, 2.3, -2.7, -2.5]
    relu_wghts = [x if x >= 0 else 0 for x in weights]
# output: [0, 3.7, 0, 0, 0, 3.7, 4.9, 2.3, 0, 0]
    assert relu_wghts == [0, 3.7, 0, 0, 0, 3.7, 4.9, 2.3, 0, 0], "ReLu function is not working as expected"

def test_sigmoid():
    """Test function acts like a sigmoid function for a 1D array"""
    weights = [-4.5, 3.7, -0.1, -1.1, -5.0, 3.7, 4.9, 2.3, -2.7, -2.5]
    sigm_wghts = [round(1 / (1 + math.exp(-x)),2) for x in weights]
# output: [0.01, 0.98, 0.48, 0.25, 0.01, 0.98, 0.99, 0.91, 0.06, 0.08]
    assert sigm_wghts == [0.01, 0.98, 0.48, 0.25, 0.01, 0.98, 0.99, 0.91, 0.06, 0.08], "Sigmoid function is not working as expected"

def test_cyclic_shift_by_5():
    """Test function which take a small character string and shifts all characters by 5 (handle boundary conditions) tsai>>yxfn"""
    str1 = 'abcdefghijklmnopqrstuvwxyz'
# output: 'fghijklmnopqrstuvwxyzabcde'
    output = ''.join([chr(ord(ch)+5) if ord(ch) < 118 else chr((ord(ch)+5)%122+96) for ch in str1 ])
    assert output  == 'fghijklmnopqrstuvwxyzabcde', "String output generated by expression is not correct"

def test_swear_word():
    """Test function to check whether the given text comment contains any swear words, if yes call it as bad comment else good comment"""
    with open('google_prof_words.txt') as f:
        lines = [line.rstrip().lower() for line in f]

    text1 = """As a teenager, I was banned from an Atheist Republic group of which Armin was admin.
    Why? I broached a controversial topic. But I had broken no rule. The geniuses simply couldn't handle it,
    they branded it crazy and expelled me. I learned that day they don't really care for FOE. Received a lot
    of hate from "champions of free speech" for this thread. Armin himself abused me and RTed extremely abusive tweets.
    Not one counter.All of them said "how could you justify abuse" when I never justified any abuse while abusing me at the same time.
    Oh the irony!I personally detest both the ideas. Insulting someone's mother and insulting mother goddess. And I am not justifying any abuse.
    I just wish some people realise all humans hold some ideas dear and don't like those to be insulted.The pain of insult is the same
    Completely missing the point.  I think India is just very new when it comes to freedom of expression.
    They might just not exactly understand how it all works.  It’s funny to watch them interpret and explain things.
    It’s like somebody who came to class a few years late"""


    text2 = """Armin himself abused me and RTed extremely abusive tweets.
    Not one counter.All of them said "how could you justify abuse" when I never justified any abuse while abusing me at the same time.
    Oh the irony!I personally detest both the ideas. Insulting someone's mother and insulting mother goddess. And I am not justifying any abuse.
    I just wish some people realise all humans hold some ideas dear and don't like those to be insulted.The pain of insult is the same
    Completely missing the point.  I think India is just very new when it comes to freedom of expression.
    They might just not exactly understand how it all works.  It’s funny to watch them interpret and explain things.
    It’s like somebody shit who came to class a few years late"""
    # Convert to lowercase
    # Split text into tokens (words), leaving out punctuation
    # Use regex to split on non-alphanumeric characters
    output1 = 'Good Comment' if not len(([wrd for wrd in re.split("[\\s.,!?:;'\"-]+",text1.lower()) if wrd in lines])) else 'Bad Comment' # output: 'Good Comment'
    output2 = 'Good Comment' if not len(([wrd for wrd in re.split("[\\s.,!?:;'\"-]+",text2.lower()) if wrd in lines])) else 'Bad Comment' # output: 'Bad Comment'
    assert output1 == 'Good Comment', "swear words check is not working as expected"
    assert output2 == 'Bad Comment', "swear words check is not working as expected"

def test_add_only_even():
    """ Test function to check the expression adds only even numbers in a list"""
    lst1 = [48, 89, 56, 88, 31]
    output_list = reduce(lambda a,b: a+b if not b%2 else a,lst1,0)
    assert output_list == 192, "Function to add only even numbers of a list is not working correctly"

def test_biggest_char_in_string():
    """ Test function to find the biggest character in a string (printable ascii characters)"""
    str3 = 'sachzin'+chr(240)+'test' # sachzin'̥'test
    output = reduce(lambda a,b: a if ord(a)>ord(b) else b,str3) # output: '̥'
    assert output == "ð", "Function to find biggest character of a string is not working correctly"

def test_add_every_third():
    """ Test function to add every 3rd number in a list and return the sum"""
    lst1 = [1,2,3,4,5,6]
    output = reduce(lambda a,b: a+b, [val for indx, val in enumerate(lst1) if not (indx+1)%3]) # output: 9
    assert output == 9, "Function to add only even numbers of a list is not working correctly"

def test_generate_num_plate():
    """ Test expression that generates 15 random KADDAADDDD number plates, where KA is fixed,
    D stands for a digit, and A stands for Capital alphabets. 10<<DD<<99 & 1000<<DDDD<<9999"""

    result = ['KA'+str(random.randint(10,99))+chr(random.randint(65,90))+random.choice([chr(x) for x in range(65,91)])+str(random.randint(1000,9999)) for _ in range(15)]
    num_plate = random.choice(result)
    assert num_plate[:2] == 'KA' and num_plate[2:4] in str(set([x for x in range(10,100)])) and \
    num_plate[4] in set([chr(x) for x in range(65,91)]) and num_plate[5] in set([chr(x) for x in range(65,91)]) \
    and num_plate[6:] in str(set([x for x in range(1000,10000)])), "Expression to generate number plates list is not working correctly"


def test_generate_num_plate_partial_func():
    """ Test partial function that generates 15 random KADDAADDDD number plates, where state initials are provided by user like 'DL' or 'KA' or 'TN',
    D stands for a digit, and A stands for Capital alphabets. 10<<DD<<99 & 1000<<DDDD<<9999"""
    state = 'DL'
    result = session7.func_num_plt(state)
    num_plate = random.choice(result)
    assert num_plate[:2] == state and num_plate[2:4] in str(set([x for x in range(10,100)])) and \
    num_plate[4] in set([chr(x) for x in range(65,91)]) and num_plate[5] in set([chr(x) for x in range(65,91)]) \
    and num_plate[6:] in str(set([x for x in range(1000,10000)])), "Expression to generate number plates list is not working correctly"

def test_partial_func_locked_param_check():
    """Test temp_converter function for not allowing multiple argument to be passed which are locked while defining it"""
    with pytest.raises(TypeError, match=r".*got multiple values for argument*"):
        state = 'DL'
        session7.func_num_plt(state,1000)
